# -*- coding: utf-8 -*-
"""project 1. Gold Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c6OlPlLAKHdFfNLp_ykTtf-e81-rJBcJ

import libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics

"""data collection and processing"""

# loding the csv data to a pandas dataframe
gold_data = pd.read_csv('/content/gld_price_data.csv')

#print first 5 rows in the dataframe
gold_data.head()

#print last 5 rows in the dataframe
gold_data.tail()

#numbers of row and col
gold_data.shape

#getting some basic information about tahe data
gold_data.info()

# checking the number of missing value
gold_data.isnull().sum()

# getting the statistical mesures of the data
gold_data.describe()

"""corelation:
1. positive
2.negative
"""

correlation = gold_data.corr()

# constructing a heatmap to understand the correlation
plt.figure(figsize = (8,8))
sns.heatmap(correlation, cbar=True, square=True, fmt=".1f", annot=True, annot_kws={"size":8}, cmap='Blues')

# correlation values of GLD
print(correlation['GLD'])

# checking the distribution of the GLD price
sns.distplot(gold_data['GLD'],color='green')



"""splliting the features and target"""

X = gold_data.drop(['Date','GLD'],axis=1)
Y = gold_data['GLD']

print(X)

print(Y)



"""splitting into traning data and test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size = 0.2, random_state=2)

"""Model training rndom forest regressor"""

# training the model
regressor = RandomForestRegressor(n_estimators=100)

#training the model
regressor.fit(X_train,Y_train)

"""model evelution

"""

#predication on the test data
test_data_prediction = regressor.predict(X_test)

print(test_data_prediction)

"""R Squared error"""

error_score = metrics.r2_score(Y_test, test_data_prediction)
print("R squared error : ", error_score)

"""compare the actual val and predicted val in a plot"""

Y_test = list(Y_test)

plt.plot(Y_test, color='blue', label = 'actual value')
plt.plot(test_data_prediction, color='green', label='predicted value')
plt.title('compare the actual val and predicted val in a plot')
plt.xlabel('numbers of values')
plt.ylabel('GLD price')
plt.legend()
plt.show()